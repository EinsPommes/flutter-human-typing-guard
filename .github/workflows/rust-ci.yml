name: Rust CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/typing-guard-svc/**'
      - '.github/workflows/rust-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/typing-guard-svc/**'
      - '.github/workflows/rust-ci.yml'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        rust-version: ['1.70.0', '1.75.0', '1.80.0']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust-version }}
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust-version }}-
          
    - name: Install dependencies
      run: |
        cd services/typing-guard-svc
        cargo build --verbose
        
    - name: Run tests
      run: |
        cd services/typing-guard-svc
        cargo test --verbose
        
    - name: Run integration tests
      run: |
        cd services/typing-guard-svc
        cargo test --test integration_test --verbose

  format:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
        
    - name: Check formatting
      run: |
        cd services/typing-guard-svc
        cargo fmt --all -- --check

  clippy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-clippy-
          
    - name: Run clippy
      run: |
        cd services/typing-guard-svc
        cargo clippy --all-targets --all-features -- -D warnings

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: |
        cd services/typing-guard-svc
        cargo audit

  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-unknown-linux-musl]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Add target
      run: rustup target add ${{ matrix.target }}
      
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-${{ matrix.target }}-
          
    - name: Build release
      run: |
        cd services/typing-guard-svc
        cargo build --release --target ${{ matrix.target }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: typing-guard-svc-${{ matrix.target }}
        path: services/typing-guard-svc/target/${{ matrix.target }}/release/typing-guard-svc

  test-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin
      
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-coverage-
          
    - name: Run tests with coverage
      run: |
        cd services/typing-guard-svc
        cargo tarpaulin --out Html --output-dir coverage
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: services/typing-guard-svc/coverage/
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: services/typing-guard-svc/coverage/cobertura.xml
        flags: rust
        name: rust-coverage

  benchmark:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-criterion
      run: cargo install cargo-criterion
      
    - name: Run benchmarks
      run: |
        cd services/typing-guard-svc
        cargo bench --verbose
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: services/typing-guard-svc/target/criterion/
